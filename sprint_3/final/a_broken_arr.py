# https://contest.yandex.ru/contest/23815/run-report/65496511/
# Задача А. Поиск в сломанном массиве.
# Изначально есть упорядоченный по возрастанию массив уникальных
# натуральных чисел.
# Затем к нему применяется операция колцевого сдвига, то есть значение
# крайнего эл-та запоминается в другом месте, на его место перемещается
# значение соседнего эл-та и так до конца массива. На последнее
# освободившееся место вписывается ранее сохранённое значение
# крайнего эл-та.
# Количество шагов сдвига и напрвление произвольны.
# Для полученного "сломанного" массива необходимо написать функцию поиска
# заданного заначения с временной сложностью не хуже О(log n),
# где n - длина массива.
#
# -- ПРИНЦИП РАБОТЫ --
# Для получения временной сложности О(log n) стоит использовать принцип
# бинарного поиска, а именно: разбиение на две части и определение,
# в какой из них икать дальше.
# Образно говоря, входной массив представляет собой последовательность
# возрастающих чисел. Где-то в нём может быть "ступенька" из максимального
# эл-та и следующего за ним минимального. После "ступеньки" массив снова
# выглядит как последовательность возрастающих чисел.
# Разбивая массив на части посередине мы получим или обе части
# отсортированными, если попали на ступеньку, или одну часть сортированной,
# а вторую - со ступенькой внутри.
# Так как, по условию эл-ты массива уникальны, можно легко определить,
# сортирована ли часть, сравнивая её крайние эл-ты.
# Затем, для сортированной части легко определить, попадает ли в неё
# искомый эл-т.
#
# -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
# Работа данного алгоритма основана на уникальности элементов. Без этого
# условия нельзя однозначно определить сортированность части и исключить из
# далнейшего просмотра её или другую.
#
# -- ОЦЕНКА СЛОЖНОСТИ --
# Так как для нахождения эл-та используется принцип бинарного поиска,
# то временная сложность составит О(log N), где N - размер массива.
# Пространственная сложность - О(1), так как для работы алгоритма
# использованы всего три дополнительные переменные и их число
# постоянно и не зависит от размера массива.
def broken_search(nums, target) -> int:
    """Бинарный поиск в 'сломанном' списке.

    Args:
        nums (List): массив, бывший отсортированным в кольцевой структуре
        target ([type]): искомый эл-т
    Returns:
        int: индекс искомого эл-та, или -1 если не найден
    Алгоритм поиска:
    Массив делится на две части посередине.
    Одна точно должна быть упорядоченна.
    Если часть отсортирована, легко проверяется, входит ли в неё X.
    Итого:
    За left, right берутся индексы первого и последнего эл-тов.
    В цикле пока диапазон не схлопнется:
    Делим на части.
    Проверяем mid == X.
    Если левая сортирована:
        если X входит:
            индексы левой для след. итерации
        иначе:
            индексы правой для след. итерации
    иначе:
        если X входит:
            индексы правой для след. итерации
        иначе:
            индексы левой для след. итерации
    след. итерация
    При сужении диапазона до двух эл-тов, проверка на сортированность
    сравнивает один и тот же эл-т с собой. В условии необходимо '='.
    """
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid

        # левая часть
        if nums[left] <= nums[mid]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:  # правая часть
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
